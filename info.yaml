--- 
# TinyTapeout project information
project:
  wokwi_id: 0 # Using HDL, not Wokwi

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tracer.v
    - reciprocal.v
  top_module:  "algofoogle_tracer"  # put the name of your top module here, make it unique by prepending your github username

# Keep a track of the submission yaml
yaml_version: 3.0

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Anton Maurovic"
  title:        "Approximated Reciprocal"
  language:     "Verilog"
  description:  "Approximates a Q6.10 fixed-point reciprocal"

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      This approximates the reciprocal of a 16-bit fixed-point input,
      in [Q6.10 format](https://en.wikipedia.org/wiki/Q_(number_format)),
      from data clocked in as 4 nibbles, and then the result clocked out
      as 2 bytes (also a Q6.10 number). It optionally has an "absolute"
      (`abs`) mode.

      I didn't come up with this method, or much of this code
      (see [original code](https://github.com/ameetgohil/reciprocal-sv/blob/master/rtl/reciprocal.sv)
      and [original method](https://observablehq.com/@drom/reciprocal-approximation)),
      but I'm planning on using it as part of a
      [ray caster in Verilog](https://github.com/algofoogle/raybox).

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      After synchronous reset, each of 4 clock rising edges will load
      a nibble of a 16-bit Q6.10 fixed-point number (via `i_data[3:0]`),
      starting with the highest nibble first. The 5th clock rising edge will then present
      the upper 8-bits of the Q6.10 result at `result[7:0]`, followed by the lower 8-bits
      on the 6th clock. The process then repeats with the 7th clock onwards.

      Optionally keep the `abs` signal high if you want the absolute of the result.

# A description of what the inputs do
  inputs:               
    - clock
    - reset
    - abs
    - none
    - i_data[0]
    - i_data[1]
    - i_data[2]
    - i_data[3]
# A description of what the outputs do
  outputs:
    - result[0]
    - result[1]
    - result[2]
    - result[3]
    - result[4]
    - result[5]
    - result[6]
    - result[7]

# The following fields are optional
  tag:          "maths, alu, test"  # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""                  # Describe any external hardware needed
  discord:      "algofoogle#4505"   # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""                  # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     "Any"               # Clock frequency in Hz (if required)
  picture:      ""                  # relative path to a picture in your repository
